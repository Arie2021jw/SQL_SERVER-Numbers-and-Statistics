Exercise #1: Calculating the salary percentiles for each employee for the whole company.


Solution #1.1, Query #1.1:

SELECT DISTINCT Y.SalaryRate						-- PercentRank()_CumeDist()Level3
, ROUND(PERCENT_RANK() OVER (ORDER BY Y.SalaryRate),2) AS SalaryRatePercentRank
, ROUND(CUME_DIST() OVER (ORDER BY Y.SalaryRate), 2) AS SalaryRateCummulativeDistribution
FROM (
	SELECT X.BusinessEntityID									-- UniqueSalaryRatesLevel2
	, X.Rate AS SalaryRate
	FROM (
		SELECT EmployeeDepartmentHistory.BusinessEntityID							-- OriginalTablesLevel1
		, EmployeeDepartmentHistory.DepartmentID
		, EmployeeDepartmentHistory.ModifiedDate AS EDH_ModifiedDate
		, Department.[Name] AS DepartmentName
		, EmployeePayHistory.Rate
		, EmployeePayHistory.ModifiedDate AS EPH_ModifiedDate
		, ROW_NUMBER() OVER (PARTITION BY EmployeeDepartmentHistory.BusinessEntityID ORDER BY EmployeeDepartmentHistory.BusinessEntityID ASC, EmployeeDepartmentHistory.ModifiedDate DESC, EmployeePayHistory.ModifiedDate DESC) AS RowNumber
		FROM [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
			ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID
		INNER JOIN [AdventureWorks2022].[HumanResources].[Employee] AS Employee
			ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID				
		INNER JOIN [AdventureWorks2022].[HumanResources].[EmployeePayHistory] AS EmployeePayHistory
			ON EmployeeDepartmentHistory.BusinessEntityID = EmployeePayHistory.BusinessEntityID		-- OriginalTablesLevel1
		) AS X
	WHERE RowNumber = 1										-- UniqueSalaryRatesLevel2
	) AS Y								-- PercentRank()_CumeDist()Level3


	-- OUTPUT
SalaryRate	SalaryRatePercentRank		SalaryRateCummulativeDistribution
9		0				0.01
9.25		0.01				0.02
9.5		0.02				0.12
9.75		0.12				0.12
10		0.12				0.17
10.25		0.17				0.18
................................................................................ TRUNCATED RESULTS ......
13.45		0.38				0.44
13.4615		0.44				0.45
13.9423		0.45				0.46
14		0.46				0.53
14.4231		0.54				0.55
15		0.55				0.64
16		0.64				0.66
16.5865		0.66				0.66
................................................................................ TRUNCATED RESULTS ......
24.0385		0.79				0.79
24.5192		0.79				0.79
25		0.8				0.87
26.4423		0.88				0.88
27.1394		0.88				0.88
................................................................................ TRUNCATED RESULTS ......
50.4808		0.98				0.98
60.0962		0.99				0.99
63.4615		0.99				0.99
72.1154		0.99				0.99
84.1346		1				1
125.5		1				1
(end of results)
(53 rows affected)


	Comments on above results:
1) PERCENT_RANK function: calculates the percentile rank of the employees' salary within the company.
This function calculates the relative rank of a row within a group of rows. In other words, it calculates the relative standing of a value within a query set or partition.
In this example, the query set or partition is the whole company.

2) CUME_DIST function: calculates the salary percentile for each employee within the company.
The cumulative distribution (CUME_DIST) calculation returns a value that represents the percentage of employees with a salary less than or equal to the current employee. 

This function calculates the cumulative distribution of a value within a group of values. In other words, it calculates the relative position of a value within a group of values.

Calculation: the cumulative distribution of a value in row R is defined as, the number of rows with values less than or equal to that value in row R, divided by the number of rows evaluated in query set or partition. 
In this example, the query set or partition is the whole company.
