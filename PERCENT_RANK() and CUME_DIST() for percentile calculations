Exercise #1: Calculating the salary percentiles for each employee for the whole company.


Solution #1.1, Query #1.1:

SELECT DISTINCT Y.SalaryRate
, ROUND(PERCENT_RANK() OVER (ORDER BY Y.SalaryRate),6) * 100 AS SalaryRatePercentRank
, ROUND(CUME_DIST() OVER (ORDER BY Y.SalaryRate), 6) * 100 AS SalaryRateCummulativeDistribution
FROM (
	SELECT X.BusinessEntityID
	, X.Rate AS SalaryRate
	FROM (
		SELECT EmployeeDepartmentHistory.BusinessEntityID										-- OriginalTablesLevel1
		, EmployeeDepartmentHistory.DepartmentID
		, EmployeeDepartmentHistory.ModifiedDate AS EDH_ModifiedDate
		, Department.[Name] AS DepartmentName
		, EmployeePayHistory.Rate
		, EmployeePayHistory.ModifiedDate AS EPH_ModifiedDate
		, ROW_NUMBER() OVER (PARTITION BY EmployeeDepartmentHistory.BusinessEntityID ORDER BY EmployeeDepartmentHistory.BusinessEntityID ASC, EmployeeDepartmentHistory.ModifiedDate DESC, EmployeePayHistory.ModifiedDate DESC) AS RowNumber
		FROM [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
			ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID
		INNER JOIN [AdventureWorks2022].[HumanResources].[Employee] AS Employee
			ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID				
		INNER JOIN [AdventureWorks2022].[HumanResources].[EmployeePayHistory] AS EmployeePayHistory
			ON EmployeeDepartmentHistory.BusinessEntityID = EmployeePayHistory.BusinessEntityID				-- OriginalTablesLevel1
		) AS X
	WHERE RowNumber = 1
	) AS Y


	-- OUTPUT
SalaryRate	SalaryRatePercentRank		SalaryRateCummulativeDistribution
9		0				1.0345
9.25		1.0381				2.4138
9.5		2.4221				11.7241
9.75		11.7647				12.069
10		12.1107				17.2414
10.25		17.301				17.931
................................................................................ TRUNCATED RESULTS ......
13.4615		43.9446				45.1724
13.9423		45.3287				45.8621
14		46.0208				53.4483
14.4231		53.6332				55.1724
15		55.3633				64.1379
16		64.3599				65.5172
16.5865		65.7439				65.8621
................................................................................ TRUNCATED RESULTS ......
24.0385		78.8927				78.9655
24.5192		79.2388				79.3103
25		79.5848				87.2414
26.4423		87.5433				87.931
27.1394		88.2353				88.2759
................................................................................ TRUNCATED RESULTS ......
63.4615		98.9619				98.9655
72.1154		99.308				99.3103
84.1346		99.654				99.6552
125.5		100				100
(end of results)
(53 rows affected)


	Comments on above results:
1) PERCENT_RANK function: calculates the percentile rank of the employees' salary within the company.
This function calculates the relative rank of a row within a group of rows. In other words, it calculates the relative standing of a value within a query set or partition.
In this example, the query set or partition is the whole company.

2) CUME_DIST function: calculates the salary percentile for each employee within the company.
The cumulative distribution (CUME_DIST) calculation returns a value that represents the percentage of employees with a salary less than or equal to the current employee. 

This function calculates the cumulative distribution of a value within a group of values. In other words, it calculates the relative position of a value within a group of values.

Calculation: the cumulative distribution of a value in row R is defined as, the number of rows with values less than or equal to that value in row R, divided by the number of rows evaluated in query set or partition. 
In this example, the query set or partition is the whole company.
